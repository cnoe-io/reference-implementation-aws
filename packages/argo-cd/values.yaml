# Ref: https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd
dex:
  enabled: false
server:
  ingress:
    enabled: true
    annotations:
      argocd.argoproj.io/sync-wave: "20"
    ingressClassName: "nginx"
    tls: true
configs:
  cm:
    accounts.backstage: apiKey
    accounts.backstage.enabled: "true"
    application.resourceTrackingMethod: annotation
    resource.exclusions: |
      - kinds:
          - ProviderConfigUsage
        apiGroups:
          - "*"
    resource.customizations: |
      "awsblueprints.io/*":
          health.lua: |
            health_status = {
              status = "Progressing",
              message = "Provisioning ..."
            }

            if obj.status == nil or obj.status.conditions == nil then
              return health_status
            end

            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" then
                if condition.status == "True" then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is up-to-date."
                  return health_status
                end
              end

              if condition.type == "LastAsyncOperation" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if condition.type == "Synced" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end
            end
            return health_status
      "*.aws.upbound.io/*":
          health.lua: |
            health_status = {
              status = "Progressing",
              message = "Provisioning ..."
            }

            if obj.status == nil or obj.status.conditions == nil then
              return health_status
            end

            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" then
                if condition.status == "True" then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is up-to-date."
                  return health_status
                end
              end

              if condition.type == "LastAsyncOperation" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if condition.type == "Synced" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end
            end

            return health_status
      "*.aws.crossplane.io/*":
          health.lua: |
            health_status = {
              status = "Progressing",
              message = "Provisioning ..."
            }

            if obj.status == nil or obj.status.conditions == nil then
              return health_status
            end

            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" then
                if condition.status == "True" then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is up-to-date."
                  return health_status
                end
              end

              if condition.type == "LastAsyncOperation" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end

              if condition.type == "Synced" then
                if condition.status == "False" then
                  health_status.status = "Degraded"
                  health_status.message = condition.message
                  return health_status
                end
              end
            end
            return health_status
  params:
    server.insecure: true
  rbac:
    policy.csv: |
      g, superuser, role:admin
      g, backstage, role:readonly