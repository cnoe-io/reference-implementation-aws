apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: backstage
  name: backstage-config
data:
  app-config.yaml: |
    app:
      title: CNOE Backstage
      baseUrl: ${BACKSTAGE_FRONTEND_URL}
    organization:
      name: CNOE
    backend:
      # Used for enabling authentication, secret is shared by all backend plugins
      # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
      # information on the format
      # auth:
      #   keys:
      #     - secret: ${BACKEND_SECRET}
      baseUrl: ${BACKSTAGE_FRONTEND_URL}
      listen:
        port: 7007
        # Uncomment the following host directive to bind to specific interfaces
        # host: 127.0.0.1
      csp:
        connect-src: ["'self'", 'http:', 'https:']
        # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
        # Default Helmet Content-Security-Policy values can be removed by setting the key to false
      cors:
        origin: ${BACKSTAGE_FRONTEND_URL}
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
        credentials: true
      database:
        client: pg
        connection:
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
      cache:
        store: memory
      # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

    integrations:
      github:
        - host: github.com
          apps:
            - $include: github-integration.yaml
    #    - host: github.com
    #      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
    #      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
    #      token: ${GITHUB_TOKEN}
        ### Example for how to add your GitHub Enterprise instance using the API:
        # - host: ghe.example.net
        #   apiBaseUrl: https://ghe.example.net/api/v3
        #   token: ${GHE_TOKEN}

    proxy:
      '/argo-workflows/api':
        target: ${ARGO_WORKFLOWS_URL}
        changeOrigin: true
        secure: true
        headers:
          Authorization:
            $env: ARGO_WORKFLOWS_AUTH_TOKEN
      '/argocd/api':
        target: ${ARGO_CD_URL}
        changeOrigin: true
        headers:
          Cookie:
            $env: ARGOCD_AUTH_TOKEN

    # Reference documentation http://backstage.io/docs/features/techdocs/configuration
    # Note: After experimenting with basic setup, use CI/CD to generate docs
    # and an external cloud storage when deploying TechDocs for production use-case.
    # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'docker' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

    auth:
      environment: development
      session:
        secret: MW2sV-sIPngEl26vAzatV-6VqfsgAx4bPIz7PuE_2Lk=
      providers:
        keycloak-oidc:
          development:
            metadataUrl: ${KEYCLOAK_NAME_METADATA}
            clientId: backstage
            clientSecret: ${KEYCLOAK_CLIENT_SECRET}
            scope: 'openid profile email groups'
            prompt: auto

    scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options
      defaultAuthor:
        name: CNOE Team
        email: cnoe@example.com
      defaultCommitMessage: 'Creando recursos AWS a trav√©s de CNOE'
      # Registro de los templates personalizados
      registry:
        - type: file
          target: /opt/app-root/src/packages/backend/templates/ec2-template.yaml
          rules:
            - allow: [Template]

    catalog:
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
        - allow: [Component, System, API, Resource, Location, Template]
      locations:
        # Examples from a public GitHub repository.
        - type: url
          target: https://github.com/awslabs/backstage-templates-on-eks/blob/main/catalog-info.yaml
        # Registrar nuestro componente de EC2
        - type: file
          target: /opt/app-root/src/packages/backstage/ec2-component.yaml
          rules:
            - allow: [Component, API]
        # Registrar nuestro template de EC2
        - type: file
          target: /opt/app-root/src/packages/backstage/templates/ec2-template.yaml
          rules:
            - allow: [Template]
        ## Uncomment these lines to add an example org
        # - type: url
        #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
        #   rules:
        #     - allow: [User, Group]
    kubernetes:
      serviceLocatorMethod:
        type: 'multiTenant'
      clusterLocatorMethods:
        - $include: k8s-config.yaml
    argoWorkflows:
        baseUrl: ${ARGO_WORKFLOWS_URL}
