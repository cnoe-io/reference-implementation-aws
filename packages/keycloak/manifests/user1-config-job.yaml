---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-config-job
  namespace: keycloak
  annotations:
    argocd.argoproj.io/sync-wave: "40"
data:
  client-scope-groups-payload.json: |
    {
        "name": "groups",
        "description": "groups a user belongs to",
        "attributes": {
            "consent.screen.text": "Access to groups a user belongs to.",
            "display.on.consent.screen": "true",
            "include.in.token.scope": "true",
            "gui.order": ""
        },
        "type": "default",
        "protocol": "openid-connect"
    }
  group-admin-payload.json: |
    {"name":"admin"}
  group-base-user-payload.json: |
    {"name":"base-user"}
  group-mapper-payload.json: |
    {
        "protocol": "openid-connect",
        "protocolMapper": "oidc-group-membership-mapper",
        "name": "groups",
        "config": {
          "claim.name": "groups",
          "full.path": "false",
          "id.token.claim": "true",
          "access.token.claim": "true",
          "userinfo.token.claim": "true"
        }
    }
  user1-payload.json: |
    {
        "username": "user1",
        "email": "",
        "firstName": "user",
        "lastName": "one",
        "requiredActions": [],
        "emailVerified": false,
        "groups": [
          "/admin"
        ],
        "enabled": true,
        "credentials":
        [
          {
            "type": "password",
            "value": "${USER1_PASSWORD}",
            "temporary": false
          }
        ]
    }
  user2-payload.json: |
    {
        "username": "user2",
        "email": "",
        "firstName": "user",
        "lastName": "two",
        "requiredActions": [],
        "emailVerified": false,
        "groups": [
          "/base-user"
        ],
        "enabled": true,
        "credentials":  [
          {
            "type": "password",
            "value": "${USER1_PASSWORD}",
            "temporary": false
          }
        ]
    }

---
apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-config
  namespace: keycloak
  annotations:
    argocd.argoproj.io/sync-wave: "50"
spec:
  template:
    metadata:
      generateName: keycloak-config
    spec:
      restartPolicy: Never
      volumes:
        - name: keycloak-config
          secret:
            secretName: keycloak-config
        - name: config-payloads
          configMap:
            name: keycloak-config-job
      containers:
        - name: keycloak-config
          image: docker.io/library/ubuntu:22.04
          volumeMounts:
            - name: keycloak-config
              readOnly: true
              mountPath: "/var/secrets/"
            - name: config-payloads
              readOnly: true
              mountPath: "/var/config/"
          command: ["/bin/bash", "-c"]
          args:
            - |
              #! /bin/bash
              set -ex -o pipefail
              apt -qq update && apt -qq install curl jq gettext-base -y
              
              ADMIN_PASSWORD=$(cat /var/secrets/KEYCLOAK_ADMIN_PASSWORD)
              KEYCLOAK_URL=http://keycloak.keycloak.svc.cluster.local:80
              USER1_PASSWORD=$(cat /var/secrets/USER1_PASSWORD)
              KEYCLOAK_TOKEN=$(curl -sS  --fail-with-body -X POST -H "Content-Type: application/x-www-form-urlencoded" \
                --data-urlencode "username=cnoe-admin" \
                --data-urlencode "password=${ADMIN_PASSWORD}" \
                --data-urlencode "grant_type=password" \
                --data-urlencode "client_id=admin-cli" \
                ${KEYCLOAK_URL}/realms/cnoe/protocol/openid-connect/token | jq -e -r '.access_token')
              
              set +e
              
              curl --fail-with-body -H "Authorization: bearer ${KEYCLOAK_TOKEN}"  "${KEYCLOAK_URL}/admin/realms/cnoe"  &> /dev/null
              if [ $? -ne 0 ]; then
                exit 1
              fi
              set -e
              
              echo "creating client scopes"
              curl -sS -H "Content-Type: application/json" \
                -H "Authorization: bearer ${KEYCLOAK_TOKEN}" \
                -X POST --data @/var/config/client-scope-groups-payload.json \
                ${KEYCLOAK_URL}/admin/realms/cnoe/client-scopes
              
              echo "creating admin group"
              curl -sS -H "Content-Type: application/json" \
                -H "Authorization: bearer ${KEYCLOAK_TOKEN}" \
                -X POST --data @/var/config/group-admin-payload.json \
                ${KEYCLOAK_URL}/admin/realms/cnoe/groups

              echo "creating base-user group"
              curl -sS -H "Content-Type: application/json" \
                -H "Authorization: bearer ${KEYCLOAK_TOKEN}" \
                -X POST --data @/var/config/group-base-user-payload.json \
                ${KEYCLOAK_URL}/admin/realms/cnoe/groups

              echo "adding group claim to tokens"
              CLIENT_SCOPE_GROUPS_ID=$(curl -sS -H "Content-Type: application/json" -H "Authorization: bearer ${KEYCLOAK_TOKEN}" -X GET  ${KEYCLOAK_URL}/admin/realms/cnoe/client-scopes | jq -e -r  '.[] | select(.name == "groups") | .id')

              curl -sS -H "Content-Type: application/json" \
                -H "Authorization: bearer ${KEYCLOAK_TOKEN}" \
                -X POST --data @/var/config/group-mapper-payload.json \
                ${KEYCLOAK_URL}/admin/realms/cnoe/client-scopes/${CLIENT_SCOPE_GROUPS_ID}/protocol-mappers/models

              echo "creating user1"
              jq --arg pwd "$USER1_PASSWORD" '.credentials[0].value = $pwd' /var/config/user1-payload.json > user1-payload-with-password.json
              curl -sS -H "Content-Type: application/json" \
                -H "Authorization: bearer ${KEYCLOAK_TOKEN}" \
                -X POST --data @user1-payload-with-password.json \
                ${KEYCLOAK_URL}/admin/realms/cnoe/users

              echo "creating user2"
              jq --arg pwd "$USER1_PASSWORD" '.credentials[0].value = $pwd' /var/config/user2-payload.json > user2-payload-with-password.json
              curl -sS -H "Content-Type: application/json" \
                -H "Authorization: bearer ${KEYCLOAK_TOKEN}" \
                -X POST --data @user2-payload-with-password.json \
                ${KEYCLOAK_URL}/admin/realms/cnoe/users

              USER1ID=$(curl -sS -H "Content-Type: application/json" \
                -H "Authorization: bearer ${KEYCLOAK_TOKEN}" "${KEYCLOAK_URL}/admin/realms/cnoe/users?lastName=one" | jq -r '.[0].id')
              USER2ID=$(curl -sS -H "Content-Type: application/json" \
                -H "Authorization: bearer ${KEYCLOAK_TOKEN}" "${KEYCLOAK_URL}/admin/realms/cnoe/users?lastName=two" | jq -r '.[0].id')

              echo "USER1 ID: ${USER1ID}"
              echo "USER1 ID: ${USER1ID}"
              echo "Configuration Done!!"
              

