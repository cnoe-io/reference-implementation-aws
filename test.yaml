---
# Source: backstage/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: backstage
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: backstage/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backstage
  namespace: backstage
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: backstage/templates/postgresql.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-config
  namespace: backstage
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  POSTGRES_USER: "backstage"
  POSTGRES_PASSWORD: 
  POSTGRES_DB:
---
# Source: backstage/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: backstage-env-vars
  namespace: backstage
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-20" # Create secret with static values from Helm values before external secret for dynamic values
type: Opaque
stringData:
  POSTGRES_HOST: "postgresql.backstage.svc.cluster.local"
  POSTGRES_PORT: "5432"
  POSTGRES_USER: "backstage"
  BACKSTAGE_FRONTEND_URL: "https://backstage.advaitt.people.aws.dev"
  KEYCLOAK_NAME_METADATA: "https://keycloak.advaitt.people.aws.dev/realms/cnoe/.well-known/openid-configuration"
  ARGO_WORKFLOWS_URL: ""
  ARGO_CD_URL: "https://argocd.advaitt.people.aws.dev"
---
# Source: backstage/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: k8s-config
  namespace: backstage
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  k8s-config.yaml: |
    type: 'config'
    clusters:
      - url: https://kubernetes.default.svc.cluster.local
        name: local
        authProvider: 'serviceAccount'
        skipTLSVerify: true
        skipMetricsLookup: true
        serviceAccountToken: 
          $file: /var/run/secrets/kubernetes.io/serviceaccount/token
        caData: 
          $file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
---
# Source: backstage/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: backstage-config
  namespace: backstage
  labels:
    app.kubernetes.io/name: backstage
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
data:
  app-config.yaml: |
    app:
      title: CNOE Backstage
      baseUrl: ${BACKSTAGE_FRONTEND_URL}
    organization:
      name: CNOE
    backend:
      baseUrl: ${BACKSTAGE_FRONTEND_URL}
      listen:
        port: 7007
      csp:
        connect-src: ["self","http:","https:"]
      cors:
        origin: ${BACKSTAGE_FRONTEND_URL}
        methods: ["GET","HEAD","PATCH","POST","PUT","DELETE"]
        credentials: true
      database:
        client: pg
        connection:
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
      cache:
        store: memory

    integrations:
      github:
        - host: github.com
          apps:
            - $include: github-integration.yaml

    proxy:
      '/argo-workflows/api':
        target: ${ARGO_WORKFLOWS_URL}
        changeOrigin: true
        secure: true
        headers:
          Authorization:
            $env: ARGO_WORKFLOWS_AUTH_TOKEN
      '/argocd/api':
        target: ${ARGO_CD_URL}
        changeOrigin: true
        headers:
          Cookie:
            $env: ARGOCD_AUTH_TOKEN

    techdocs:
      builder: 'local'
      generator:
        runIn: 'docker'
      publisher:
        type: 'local'

    auth:
      environment: development
      session:
        secret: "MW2sV-sIPngEl26vAzatV-6VqfsgAx4bPIz7PuE_2Lk="
      providers:
        keycloak-oidc:
          development:
            metadataUrl: ${KEYCLOAK_NAME_METADATA}
            clientId: backstage
            clientSecret: ${BACKSTAGE_CLIENT_SECRET}
            scope: "openid profile email groups"
            prompt: auto

    scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options

    catalog:
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
        - allow:
          - Component
          - System
          - API
          - Resource
          - Location
          - Template
      locations:
        - type: url
          target: https://github.com/awslabs/backstage-templates-on-eks/blob/main/catalog-info.yaml
    kubernetes:
      serviceLocatorMethod:
        type: "multiTenant"
      clusterLocatorMethods:
        - $include: k8s-config.yaml
    argoWorkflows:
        baseUrl: ${ARGO_WORKFLOWS_URL}
---
# Source: backstage/templates/postgresql.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgresql
  namespace: backstage
  labels:
    app: postgresql
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
spec:
  storageClassName: gp2
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: backstage/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-all
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - '*'
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch
---
# Source: backstage/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: backstage-read-all
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: backstage
  namespace: backstage
roleRef:
  kind: ClusterRole
  name: read-all
  apiGroup: rbac.authorization.k8s.io---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backstage-argo-worfklows
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - argoproj.io
    resources:
    - workflows
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - create
---
# Source: backstage/templates/user-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: keycloak-write-workflows
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: ["argoproj.io"]
  resources: ["workflows"]
  verbs: ["*"]
---
# Source: backstage/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backstage-argo-worfklows
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: backstage-argo-worfklows
subjects:
- kind: ServiceAccount
  name: backstage
  namespace: backstage
---
# Source: backstage/templates/user-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: keycloak-superuser-group
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: superuser
---
# Source: backstage/templates/user-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: keycloak-backstage-users-group
  labels:
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: keycloak-write-workflows
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: backstage-users
---
# Source: backstage/templates/postgresql.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: backstage
  labels:
    app: postgresql
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - port: 5432
    name: postgres
  clusterIP: None
  selector:
    app: postgresql
---
# Source: backstage/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: backstage
  namespace: backstage
  labels:
    app: backstage
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app: backstage
  ports:
    - name: http
      port: 7007
      targetPort: http
---
# Source: backstage/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: backstage
  labels:
    app: backstage
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
    spec:
      serviceAccountName: backstage
      volumes:
        - name: backstage-config
          projected:
            sources:
              - secret:
                  name: integrations
                  items:
                    - key: github-integration.yaml
                      path: github-integration.yaml
              - configMap:
                  name: backstage-config
                  items:
                    - key: app-config.yaml
                      path: app-config.yaml
              - secret:
                  name: k8s-config
                  items:
                    - key: k8s-config.yaml
                      path: k8s-config.yaml
      containers:
        - name: backstage
          image: "public.ecr.aws/cnoe-io/backstage:v0.0.2"
          imagePullPolicy: IfNotPresent
          command:
            - node
            - packages/backend
            - --config
            - config/app-config.yaml
          ports:
            - name: http
              containerPort: 7007
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: backstage-config
              mountPath: "/app/config"
              readOnly: true
          envFrom:
            - secretRef:
                name: backstage-env-vars
            - secretRef:
                name: postgresql-config
---
# Source: backstage/templates/postgresql.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: backstage
  labels:
    app: postgresql
    helm.sh/chart: backstage-0.1.0
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.0.2"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: service-postgresql
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgres
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
        image: "docker.io/library/postgres:15.3-alpine3.18"
        imagePullPolicy: IfNotPresent
        envFrom:
        - secretRef:
            name: backstage-env-vars
        ports:
        - containerPort: 5432
          name: postgresdb
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: postgress
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: postgresql
---
# Source: backstage/templates/secrets.yaml
# TODO: Seperate Backstage Secret and PostGres Secret.
